#include <stdio.h>
#include <stdlib.h>

// Structure to represent items
struct Item {
    int value;
    int weight;
};

// Function to compare items based on value per unit weight (value/weight)
int compare(const void *a, const void *b) {
    double ratio1 = (double)(((struct Item *)a)->value) / ((struct Item *)a)->weight;
    double ratio2 = (double)(((struct Item *)b)->value) / ((struct Item *)b)->weight;
    if (ratio1 > ratio2)
        return -1;
    else if (ratio1 < ratio2)
        return 1;
    else
        return 0;
}

// Function to solve Fractional Knapsack problem using greedy approach
double fractionalKnapsack(int W, struct Item arr[], int n) {
    // Sort items based on value per unit weight in non-increasing order
    qsort(arr, n, sizeof(arr[0]), compare);

    double totalValue = 0.0; // Total value of items selected
    int currentWeight = 0;   // Current weight in knapsack

    // Loop through all items
    for (int i = 0; i < n; i++) {
        // If adding the entire item won't exceed knapsack capacity
        if (currentWeight + arr[i].weight <= W) {
            totalValue += arr[i].value;
            currentWeight += arr[i].weight;
        } else { // Otherwise, add a fractional part of the item
            int remainingWeight = W - currentWeight;
            totalValue += arr[i].value * ((double)remainingWeight / arr[i].weight);
            break; // Since knapsack is full
        }
    }

    return totalValue;
}

int main() {
    int W = 50; // Knapsack capacity
    struct Item arr[] = {{60, 10}, {100, 20}, {120, 30}}; // Items {value, weight}
    int n = sizeof(arr) / sizeof(arr[0]);

    double maxValue = fractionalKnapsack(W, arr, n);

    printf("Maximum value in Knapsack = %.2f\n", maxValue);

    return 0;
}
