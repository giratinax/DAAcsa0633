#include <stdio.h>
#include <limits.h>

#define N 4

// Function to find minimum cost using Branch and Bound
int minCost(int costMatrix[N][N], int rowMask, int colMask, int row, int totalAssigned, int totalCost) {
    // If all rows are processed, return the total cost
    if (row == N) {
        return totalCost;
    }

    // Initialize minimum cost for current row
    int min = INT_MAX;

    // Try assigning tasks to agents in this row
    for (int j = 0; j < N; j++) {
        // If this agent is not assigned any task and the task is not already assigned to someone else
        if (!(rowMask & (1 << row)) && !(colMask & (1 << j))) {
            int newTotalAssigned = totalAssigned + 1;
            int newTotalCost = totalCost + costMatrix[row][j];

            // Update rowMask and colMask for the next row
            int newRowMask = rowMask | (1 << row);
            int newColMask = colMask | (1 << j);

            // Find minimum cost for the next row
            int cost = minCost(costMatrix, newRowMask, newColMask, row + 1, newTotalAssigned, newTotalCost);

            // Update min if the cost is less
            if (cost < min) {
                min = cost;
            }
        }
    }

    return min;
}

// Function to solve the Assignment Problem using Branch and Bound
int solveAssignmentProblem(int costMatrix[N][N]) {
    // Initialize masks for rows and columns
    int rowMask = 0, colMask = 0;

    // Start with row 0 and totalAssigned and totalCost as 0
    int row = 0, totalAssigned = 0, totalCost = 0;

    // Find the minimum cost using Branch and Bound
    return minCost(costMatrix, rowMask, colMask, row, totalAssigned, totalCost);
}

int main() {
    int costMatrix[N][N] = {
        {9, 2, 7, 8},
        {6, 4, 3, 7},
        {5, 8, 1, 8},
        {7, 6, 9, 4}
    };

    int minCost = solveAssignmentProblem(costMatrix);

    printf("Minimum cost for assignment problem is: %d\n", minCost);

    return 0;
}
